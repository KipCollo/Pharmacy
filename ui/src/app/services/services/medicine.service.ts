/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createMedicine } from '../fn/medicine/create-medicine';
import { CreateMedicine$Params } from '../fn/medicine/create-medicine';
import { deleteMedicine } from '../fn/medicine/delete-medicine';
import { DeleteMedicine$Params } from '../fn/medicine/delete-medicine';
import { getAllMedicines } from '../fn/medicine/get-all-medicines';
import { GetAllMedicines$Params } from '../fn/medicine/get-all-medicines';
import { getMedicineById } from '../fn/medicine/get-medicine-by-id';
import { GetMedicineById$Params } from '../fn/medicine/get-medicine-by-id';
import { MedicineResponse } from '../models/medicine-response';
import { PageResponseMedicineResponse } from '../models/page-response-medicine-response';

@Injectable({ providedIn: 'root' })
export class MedicineService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllMedicines()` */
  static readonly GetAllMedicinesPath = '/api/medicines';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllMedicines()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMedicines$Response(params?: GetAllMedicines$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseMedicineResponse>> {
    return getAllMedicines(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllMedicines$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMedicines(params?: GetAllMedicines$Params, context?: HttpContext): Observable<PageResponseMedicineResponse> {
    return this.getAllMedicines$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseMedicineResponse>): PageResponseMedicineResponse => r.body)
    );
  }

  /** Path part for operation `createMedicine()` */
  static readonly CreateMedicinePath = '/api/medicines';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createMedicine()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createMedicine$Response(params: CreateMedicine$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return createMedicine(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createMedicine$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createMedicine(params: CreateMedicine$Params, context?: HttpContext): Observable<string> {
    return this.createMedicine$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `getMedicineById()` */
  static readonly GetMedicineByIdPath = '/api/medicines/{medicineId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMedicineById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMedicineById$Response(params: string, context?: HttpContext | undefined): Observable<StrictHttpResponse<MedicineResponse>> {
    return getMedicineById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMedicineById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMedicineById(params: string, context?: HttpContext): Observable<MedicineResponse> {
    return this.getMedicineById$Response(params, context).pipe(
      map((r: StrictHttpResponse<MedicineResponse>): MedicineResponse => r.body)
    );
  }

  /** Path part for operation `deleteMedicine()` */
  static readonly DeleteMedicinePath = '/api/medicines/{medicineId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteMedicine()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMedicine$Response(params: DeleteMedicine$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteMedicine(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteMedicine$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMedicine(params: DeleteMedicine$Params, context?: HttpContext): Observable<void> {
    return this.deleteMedicine$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
