/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addCustomer } from '../fn/customers-ap-is/add-customer';
import { AddCustomer$Params } from '../fn/customers-ap-is/add-customer';
import { deleteCustomer } from '../fn/customers-ap-is/delete-customer';
import { DeleteCustomer$Params } from '../fn/customers-ap-is/delete-customer';
import { existsById } from '../fn/customers-ap-is/exists-by-id';
import { ExistsById$Params } from '../fn/customers-ap-is/exists-by-id';
import { getAllCustomers } from '../fn/customers-ap-is/get-all-customers';
import { GetAllCustomers$Params } from '../fn/customers-ap-is/get-all-customers';
import { getCustomer } from '../fn/customers-ap-is/get-customer';
import { GetCustomer$Params } from '../fn/customers-ap-is/get-customer';
import { updateCustomer1 } from '../fn/customers-ap-is/update-customer-1';
import { UpdateCustomer1$Params } from '../fn/customers-ap-is/update-customer-1';
import { UserResponse } from '../models/user-response';

@Injectable({ providedIn: 'root' })
export class CustomersApIsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllCustomers()` */
  static readonly GetAllCustomersPath = '/api/customers';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllCustomers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllCustomers$Response(params?: GetAllCustomers$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserResponse>>> {
    return getAllCustomers(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllCustomers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllCustomers(params?: GetAllCustomers$Params, context?: HttpContext): Observable<Array<UserResponse>> {
    return this.getAllCustomers$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserResponse>>): Array<UserResponse> => r.body)
    );
  }

  /** Path part for operation `updateCustomer1()` */
  static readonly UpdateCustomer1Path = '/api/customers';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateCustomer1()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCustomer1$Response(params: UpdateCustomer1$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updateCustomer1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateCustomer1$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCustomer1(params: UpdateCustomer1$Params, context?: HttpContext): Observable<void> {
    return this.updateCustomer1$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `addCustomer()` */
  static readonly AddCustomerPath = '/api/customers';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addCustomer()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addCustomer$Response(params: AddCustomer$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return addCustomer(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addCustomer$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addCustomer(params: AddCustomer$Params, context?: HttpContext): Observable<string> {
    return this.addCustomer$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `getCustomer()` */
  static readonly GetCustomerPath = '/api/customers/{customerId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCustomer()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCustomer$Response(params: GetCustomer$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponse>> {
    return getCustomer(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCustomer$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCustomer(params: GetCustomer$Params, context?: HttpContext): Observable<UserResponse> {
    return this.getCustomer$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponse>): UserResponse => r.body)
    );
  }

  /** Path part for operation `deleteCustomer()` */
  static readonly DeleteCustomerPath = '/api/customers/{customerId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteCustomer()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCustomer$Response(params: DeleteCustomer$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteCustomer(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteCustomer$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCustomer(params: DeleteCustomer$Params, context?: HttpContext): Observable<void> {
    return this.deleteCustomer$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `existsById()` */
  static readonly ExistsByIdPath = '/api/customers/exists/{customerId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `existsById()` instead.
   *
   * This method doesn't expect any request body.
   */
  existsById$Response(params: ExistsById$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return existsById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `existsById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  existsById(params: ExistsById$Params, context?: HttpContext): Observable<boolean> {
    return this.existsById$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

}
