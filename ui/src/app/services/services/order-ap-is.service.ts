/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createOrder } from '../fn/order-ap-is/create-order';
import { CreateOrder$Params } from '../fn/order-ap-is/create-order';
import { createPrescriptionOrder } from '../fn/order-ap-is/create-prescription-order';
import { CreatePrescriptionOrder$Params } from '../fn/order-ap-is/create-prescription-order';
import { findAll } from '../fn/order-ap-is/find-all';
import { FindAll$Params } from '../fn/order-ap-is/find-all';
import { findById } from '../fn/order-ap-is/find-by-id';
import { FindById$Params } from '../fn/order-ap-is/find-by-id';
import { getOrderStatus } from '../fn/order-ap-is/get-order-status';
import { GetOrderStatus$Params } from '../fn/order-ap-is/get-order-status';
import { OrderResponse } from '../models/order-response';

@Injectable({ providedIn: 'root' })
export class OrderApIsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `findAll()` */
  static readonly FindAllPath = '/api/orders';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAll$Response(params?: FindAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<OrderResponse>>> {
    return findAll(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAll(params?: FindAll$Params, context?: HttpContext): Observable<Array<OrderResponse>> {
    return this.findAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<OrderResponse>>): Array<OrderResponse> => r.body)
    );
  }

  /** Path part for operation `createOrder()` */
  static readonly CreateOrderPath = '/api/orders';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createOrder()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createOrder$Response(params: CreateOrder$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return createOrder(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createOrder$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createOrder(params: CreateOrder$Params, context?: HttpContext): Observable<number> {
    return this.createOrder$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `createPrescriptionOrder()` */
  static readonly CreatePrescriptionOrderPath = '/api/orders/create';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createPrescriptionOrder()` instead.
   *
   * This method doesn't expect any request body.
   */
  createPrescriptionOrder$Response(params: CreatePrescriptionOrder$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return createPrescriptionOrder(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createPrescriptionOrder$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  createPrescriptionOrder(params: CreatePrescriptionOrder$Params, context?: HttpContext): Observable<{
}> {
    return this.createPrescriptionOrder$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `findById()` */
  static readonly FindByIdPath = '/api/orders/{orderId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findById()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById$Response(params: FindById$Params, context?: HttpContext): Observable<StrictHttpResponse<OrderResponse>> {
    return findById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById(params: FindById$Params, context?: HttpContext): Observable<OrderResponse> {
    return this.findById$Response(params, context).pipe(
      map((r: StrictHttpResponse<OrderResponse>): OrderResponse => r.body)
    );
  }

  /** Path part for operation `getOrderStatus()` */
  static readonly GetOrderStatusPath = '/api/orders/{id}/status';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getOrderStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOrderStatus$Response(params: GetOrderStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getOrderStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getOrderStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOrderStatus(params: GetOrderStatus$Params, context?: HttpContext): Observable<{
}> {
    return this.getOrderStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
