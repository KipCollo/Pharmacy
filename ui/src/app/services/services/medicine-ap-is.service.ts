/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createMedicine } from '../fn/medicine-ap-is/create-medicine';
import { CreateMedicine$Params } from '../fn/medicine-ap-is/create-medicine';
import { deleteMedicine } from '../fn/medicine-ap-is/delete-medicine';
import { DeleteMedicine$Params } from '../fn/medicine-ap-is/delete-medicine';
import { getAllMedicines } from '../fn/medicine-ap-is/get-all-medicines';
import { GetAllMedicines$Params } from '../fn/medicine-ap-is/get-all-medicines';
import { getMedicineById } from '../fn/medicine-ap-is/get-medicine-by-id';
import { GetMedicineById$Params } from '../fn/medicine-ap-is/get-medicine-by-id';
import { PageResponseProductResponse } from '../models/page-response-product-response';
import { ProductResponse } from '../models/product-response';
import { PurchaseProductResponse } from '../models/purchase-product-response';
import { purchaseProducts } from '../fn/medicine-ap-is/purchase-products';
import { PurchaseProducts$Params } from '../fn/medicine-ap-is/purchase-products';
import { updateCustomer } from '../fn/medicine-ap-is/update-customer';
import { UpdateCustomer$Params } from '../fn/medicine-ap-is/update-customer';

@Injectable({ providedIn: 'root' })
export class MedicineApIsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllMedicines()` */
  static readonly GetAllMedicinesPath = '/api/products';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllMedicines()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMedicines$Response(params?: GetAllMedicines$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseProductResponse>> {
    return getAllMedicines(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllMedicines$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMedicines(params?: GetAllMedicines$Params, context?: HttpContext): Observable<PageResponseProductResponse> {
    return this.getAllMedicines$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseProductResponse>): PageResponseProductResponse => r.body)
    );
  }

  /** Path part for operation `updateCustomer()` */
  static readonly UpdateCustomerPath = '/api/products';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateCustomer()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCustomer$Response(params: UpdateCustomer$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updateCustomer(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateCustomer$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCustomer(params: UpdateCustomer$Params, context?: HttpContext): Observable<void> {
    return this.updateCustomer$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `createMedicine()` */
  static readonly CreateMedicinePath = '/api/products';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createMedicine()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createMedicine$Response(params: CreateMedicine$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return createMedicine(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createMedicine$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createMedicine(params: CreateMedicine$Params, context?: HttpContext): Observable<string> {
    return this.createMedicine$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `purchaseProducts()` */
  static readonly PurchaseProductsPath = '/api/products/purchase';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `purchaseProducts()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  purchaseProducts$Response(params: PurchaseProducts$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PurchaseProductResponse>>> {
    return purchaseProducts(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `purchaseProducts$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  purchaseProducts(params: PurchaseProducts$Params, context?: HttpContext): Observable<Array<PurchaseProductResponse>> {
    return this.purchaseProducts$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<PurchaseProductResponse>>): Array<PurchaseProductResponse> => r.body)
    );
  }

  /** Path part for operation `getMedicineById()` */
  static readonly GetMedicineByIdPath = '/api/products/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMedicineById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMedicineById$Response(params: GetMedicineById$Params, context?: HttpContext): Observable<StrictHttpResponse<ProductResponse>> {
    return getMedicineById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMedicineById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMedicineById(params: GetMedicineById$Params, context?: HttpContext): Observable<ProductResponse> {
    return this.getMedicineById$Response(params, context).pipe(
      map((r: StrictHttpResponse<ProductResponse>): ProductResponse => r.body)
    );
  }

  /** Path part for operation `deleteMedicine()` */
  static readonly DeleteMedicinePath = '/api/products/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteMedicine()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMedicine$Response(params: DeleteMedicine$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteMedicine(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteMedicine$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMedicine(params: DeleteMedicine$Params, context?: HttpContext): Observable<void> {
    return this.deleteMedicine$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
